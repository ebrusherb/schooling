plot(net)
plot.network(net)
M=circle(10,2)
net=as.network(M)
plot(net)
M=circle(10,4)
net=as.network(M)
M=circle(10,4)
plot(net)
plot(net,cex=2)
plot(net,cex=4)
plot(net,cex=10)
plot(net,cex=4)
plot(net,cex=10)
M=circle(10,2);net=as.network(M);plot(net)
M[1,5]=1
M=circle(10,2);net=as.network(M);plot(net)
M=circle(10,2);M[1,5]=1;net=as.network(M);plot(net)
M=circle(10,2);M[1,5]=1;net=as.network(M);plot(net,vertex.cex=2)
xcoords=ycoords=array(,10)
pis=seq(0,2*pi,length.out=10)
xcoords=cos(pis);ycoords=sin(pis)
coords=cbind(xcoords,ycoords)
M=circle(10,2);M[1,5]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords)
M=circle(10,2);net=as.network(M);plot(net,vertex.cex=2,coord=coords)
pis=seq(0,2*pi,length.out=11)[-11]
xcoords=cos(pis);ycoords=sin(pis)
coords=cbind(xcoords,ycoords)
M=circle(10,2);net=as.network(M);plot(net,vertex.cex=2,coord=coords)
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords)
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='white')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col=#FFFFFF)
)
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#FFFFFF')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#101BD2')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#6495ED')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#595FD5')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#53BF2')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#535BF2')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=2,coord=coords,vertex.col='#3962F7')
M=circle(10,2);M[5,1]=1;net=as.network(M);plot(net,vertex.cex=3,coord=coords,vertex.col='#3962F7')
n=20 #
#
pis=seq(0,2*pi,length.out=11)[-11]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:n-1,n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,coord=coords,vertex.col='#3962F7')
M
plot(net)
coords
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)
plot(net,vertex.cex=3,coord=coords,vertex.col='#3962F7')
plot(net,vertex.cex=3,vertex.col='#3962F7')
strategy
n=10 #
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:n-1,n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7')
M
strategy
i
n=10 #
#
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:n-1,n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7')
?plot.network
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy)
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5)
n=10 #
#
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:n-1,n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5)
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:n-1,n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:(n-2),n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
n=7 #
#
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:(n-2),n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
n=7 #
#
positions<-array(,c(n,2))#
positions[,1]=runif(n,0,1)#
positions[,2]=runif(n,0,1)#
d=as.matrix(dist(positions))#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
strategy=sample(1:(n-1),n,replace=TRUE)#
M<-array(0,c(n,n))#
for(i in 1:n){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1#
}#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
n=20	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
n=20	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=3,vertex.col='#3962F7',label=strategy,label.pos=5,coord=positions)
coords
M
plot(net)
plot(net,coord=coords)
plot(net,vertex.cex=3,vertex.col='#3962F7',coord=positions)
plot(net,vertex.cex=3,vertex.col='#3962F7',coord=coords)
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=10	#
native=4#
invader=9#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=16	#
native=4#
invader=4#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=16	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
N=floor(seq(20,150,length.out=numcount))
N
library(R.matlab)
?readMAT
?readMat
getwd()
readMat('H2vals.mat')
readMat('H2vals.mat')->H
str(H)
Hvals=H$H2vals
Hmod=H$H2valsmod
str(Hmod)
str(Hvals)
str(apply(Hmod,1,mean))
str(apply(Hmod,2,mean))
Hmod=apply(Hmod,2,mean)
plot(Hvals,Hmod)
abline(0,1)
which(Hmod>25)
Hmod=Hmod[-140,439]
Hmod=Hmod[-c(140,439)]
Hvals=Hvals[-c(140,439)]
plot(Hvals,Hmod)
abline(0,1)
cor(Hvals,Hmod)
summary(lm(Hvals~Hmod))
plot(Hvals,Hmod,xlab="Deviation from consensus",ylab="Deviation from signal",bty='n')
abline(0,1)
plot(Hvals,Hmod,xlab="Deviation from consensus",ylab="Deviation from signal",bty='n'cex.lab=1.5)
abline(0,1)
plot(Hvals,Hmod,xlab="Deviation from consensus",ylab="Deviation from signal",bty='n',cex.lab=1.5)
par(oma=c(0,2,0,0))
plot(Hvals,Hmod,xlab="Deviation from consensus",ylab="Deviation from signal",bty='n',cex.lab=1.5)
plot(Hvals,Hmod,xlab="Expected longterm deviation from consensus",ylab="Deviation from signal",bty='n',cex.lab=1.5)
plot(Hvals,Hmod,xlab="Longterm deviation from consensus",ylab="Deviation from signal",bty='n',cex.lab=1.5)
plot(Hvals,Hmod,xlab="Longterm deviation from consensus",ylab="Longterm deviation from signal",bty='n',cex.lab=1.5)
quartz()#
pdf(file='deviations.pdf')#
#
par(oma=c(0,2,0,0))#
plot(Hvals,Hmod,xlab="Longterm deviation from consensus",ylab="Longterm deviation from signal",bty='n',cex.lab=1.5)#
#
graphics.off()
n=16	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=16	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
convergence3(M)
n=16	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}
apply(M,1,sum)
apply(M,2,sum)
convergence3(M)
plot(convergence3(M))
convergence3(M)[cheater]
mean(convergence3(M)[-cheater])
.224-.2203
(.224-.2203)/.224
n=20	#
native=4#
invader=15#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
quartz()#
#
pdf(file='convergence_scores_one_network.pdf')#
par(oma=c(0,4,0,0))#
v=convergence3(M)#
plot((1:n)-cheater,v,xlab="Distance from Invader",ylab="Convergence Score",main=paste("N = ",n,", native strategy = ",native,", invader strategy = ",invader,sep=""),cex.lab=1.5,mgp=c(2.5,1,0),cex.main=1.5,bty="n",axes=FALSE)#
axis(1,at=seq(1-cheater,n-cheater,by=2))#
axis(2,at=round(seq(min(v),max(v),length.out=4),4))#
graphics.off()
n=20	#
native=4#
invader=18#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}
n=20	#
native=4#
invader=18#
#
indices=rep(1:n,3)#
#
cheater=floor(n/2)#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
quartz()#
#
pdf(file='convergence_scores_one_network.pdf')#
par(oma=c(0,4,0,0))#
v=convergence3(M)#
plot((1:n)-cheater,v,xlab="Distance from Invader",ylab="Convergence Score",main=paste("N = ",n,", native strategy = ",native,", invader strategy = ",invader,sep=""),cex.lab=1.5,mgp=c(2.5,1,0),cex.main=1.5,bty="n",axes=FALSE)#
axis(1,at=seq(1-cheater,n-cheater,by=2))#
axis(2,at=round(seq(min(v),max(v),length.out=4),4))#
graphics.off()
n=20	#
native=4#
invader=4#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=20	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=20	#
native=4#
invader=18#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
layout(matrix(1:3,nrow=1,byrow=TRUE))
n=20	#
native=4#
invader=4#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=20	#
native=4#
invader=10#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
n=20	#
native=4#
invader=18#
#
pis=seq(0,2*pi,length.out=n+1)[-(n+1)]#
xcoords=cos(pis);ycoords=sin(pis)#
coords=cbind(xcoords,ycoords)#
#
indices=rep(1:n,3)#
#
cheater=1#
#
M=circle(n,native)#
a=invader#
l=ceiling(a/2)#
M[cheater,]=0#
if(a>1){#
M[cheater,indices[(cheater+1:l)+n]]=1#
M[cheater,indices[(cheater-1:(a-l))+n]]=1#
}#
if(a==1){#
	M[cheater,cheater+1]=1#
}#
#
net=as.network(M)#
plot(net,vertex.cex=2,vertex.col='#3962F7',coord=coords)
load("/Users/eleanorbrush/Dropbox/schooling_consensus/ESS_advantages.Rdata")
ls()
str(advantage)
advantage
library(igraph)#
#
f<-function(k,i,m,t){#
	x=0#
	if(is.element(i,c(1:(t+1),m-t-1,m-1))){#
		x=tan(pi/(m-2)*k*(i-1))+1#
	}#
	if(is.element(i,(t+2):(m-t-2))){#
		x=tan(pi/(m-2)*k*(i-m/2))+1#
	}#
	x#
}#
#
lambda<-function(k,m,t){#
	vec=matrix(1:t,nrow=1)#
	vec=apply(vec,2,f,k=k,m=m,t=t)#
	vec=cumprod(vec)#
	x=1-1/(2*t)*sum(vec)#
	return(x)#
}#
#
lap<-function(G){#
	n=length(V(G))#
	M=array(0,c(n,n))#
	for(i in 1:n){#
		M[i,neighbors(G,i,mode="in")]=-1/degree(G,i,mode="in")#
	}#
	diag(M)<-1+diag(M)#
	M#
}#
#
circle<-function(n,k){#
	m=array(0,c(n,n))#
	l=ceiling(k/2)#
	indices=rep(1:n,3)#
	if(k==1){#
		for(i in 1:(n-1)){#
			m[i,i+1]=1#
		}#
		m[n,1]=1#
	} else#
	for(i in 1:n){#
		m[i,indices[(i+1:l)+n]]=1#
		m[i,indices[(i-1:(k-l))+n]]=1#
	}#
	return(m)#
}#
######
#####
m=10#
t=2#
G=graph.adjacency(circle(n=m,k=2*t))#
L=lap(G)#
Lhat=L#
Lhat[1,]=0#
#
# V=array(0,c(m,m))#
# for(i in 1:m){#
	# for(j in 1:m){#
		# V[i,j]=exp(2*pi*1i/m*(i-1)*(j-1))#
	# }#
# }#
#
V=array(0,c(m,m))#
V[,1]=1#
for(i in 1:((m-1)/2)){#
	V[,i+1]=cos(2*pi*i/m*(0:(m-1)))#
	V[,i+(m-1)/2+1]=sin(2*pi*i/m*(0:(m-1)))#
}#
#
Lambda=(L%*%V/V)[m,]#
#
Vhat=eigen(Lhat)$vectors#
Vhat=cbind(Vhat[,m],Vhat)#
Vhat=Vhat[,-(m+1)]#
#
Lambdahat=(Lhat%*%Vhat/Vhat)[m,]#
#
M=V%*%diag(1-Lambda)#
#
A=array(,c(m,(m-1)/2))#
B=array(,c(m,(m-1)/2))#
for(i in 1:((m-1)/2)){#
	A[,i]=V[1+i,]+V[m-i+1,]#
	B[,i]=V[1+i,]-V[m-i+1,]#
}#
C=array(0,c(m,m))#
for(i in 1:m){#
	for(j in 1:m){#
		C[i,j]=sum(Vhat[,j]*V[,i])/(sum(V[,i]^2))#
	}#
}#
# C=array(0,c(m,m))()#
# C[,1]=c(1,rep(0,m-1))#
# for(j in 1:((m-1)/2)){#
	# C[((m-1)/2+1):(m-1)+1,j+1]=2*sin(2*pi*j*(1:((m-1)/2))/m)#
	# C[1:((m-1)/2)+1,j+((m-1)/2)+1]=2*cos(2*pi*j*(1:((m-1)/2))/m)#
# }#
#
Vhat2=V%*%(C)#
#
A=array(,c(m,m))#
A[1,]=-V[1,]#
for(i in 2:m){#
	for(j in 1:((m-1)/2+1)){#
		A[i,j]=-1/(2*t)*sum(cos(2*pi/m*(j-1)*((i-1+1):(i-1+t))))-1/(2*t)*sum(cos(2*pi/m*(j-1)*((i-1-1):(i-1-t))))#
	}#
	for(j in ((m-1)/2+2):(m)){#
		A[i,j]=-1/(2*t)*sum(sin(2*pi/m*(j-(m-1)/2-1)*((i-1+1):(i-1+t))))-1/(2*t)*sum(sin(2*pi/m*(j-(m-1)/2-1)*((i-1-1):(i-1-t))))#
	}#
}#
#
Vnorm=V#
Vnorm[,1]=V[,1]/sqrt(m)#
Vnorm[,2:m]=V[,2:m]/sqrt(m/2)#
#
M=t(V)%*%A
m
M
round(M,digits=3)
M=M[2:5,2:5]
M
eigen(M)
eigen(t(M))
M
m=20#
t=3#
G=graph.adjacency(circle(n=m,k=2*t))#
L=lap(G)#
Lhat=L#
Lhat[1,]=0#
#
# V=array(0,c(m,m))#
# for(i in 1:m){#
	# for(j in 1:m){#
		# V[i,j]=exp(2*pi*1i/m*(i-1)*(j-1))#
	# }#
# }#
#
V=array(0,c(m,m))#
V[,1]=1#
for(i in 1:((m-1)/2)){#
	V[,i+1]=cos(2*pi*i/m*(0:(m-1)))#
	V[,i+(m-1)/2+1]=sin(2*pi*i/m*(0:(m-1)))#
}#
#
Lambda=(L%*%V/V)[m,]#
#
Vhat=eigen(Lhat)$vectors#
Vhat=cbind(Vhat[,m],Vhat)#
Vhat=Vhat[,-(m+1)]#
#
Lambdahat=(Lhat%*%Vhat/Vhat)[m,]#
#
M=V%*%diag(1-Lambda)#
#
A=array(,c(m,(m-1)/2))#
B=array(,c(m,(m-1)/2))#
for(i in 1:((m-1)/2)){#
	A[,i]=V[1+i,]+V[m-i+1,]#
	B[,i]=V[1+i,]-V[m-i+1,]#
}#
C=array(0,c(m,m))#
for(i in 1:m){#
	for(j in 1:m){#
		C[i,j]=sum(Vhat[,j]*V[,i])/(sum(V[,i]^2))#
	}#
}#
# C=array(0,c(m,m))()#
# C[,1]=c(1,rep(0,m-1))#
# for(j in 1:((m-1)/2)){#
	# C[((m-1)/2+1):(m-1)+1,j+1]=2*sin(2*pi*j*(1:((m-1)/2))/m)#
	# C[1:((m-1)/2)+1,j+((m-1)/2)+1]=2*cos(2*pi*j*(1:((m-1)/2))/m)#
# }#
#
Vhat2=V%*%(C)#
#
A=array(,c(m,m))#
A[1,]=-V[1,]#
for(i in 2:m){#
	for(j in 1:((m-1)/2+1)){#
		A[i,j]=-1/(2*t)*sum(cos(2*pi/m*(j-1)*((i-1+1):(i-1+t))))-1/(2*t)*sum(cos(2*pi/m*(j-1)*((i-1-1):(i-1-t))))#
	}#
	for(j in ((m-1)/2+2):(m)){#
		A[i,j]=-1/(2*t)*sum(sin(2*pi/m*(j-(m-1)/2-1)*((i-1+1):(i-1+t))))-1/(2*t)*sum(sin(2*pi/m*(j-(m-1)/2-1)*((i-1-1):(i-1-t))))#
	}#
}#
#
Vnorm=V#
Vnorm[,1]=V[,1]/sqrt(m)#
Vnorm[,2:m]=V[,2:m]/sqrt(m/2)#
#
M=t(V)%*%A
round(M,digits=3)
M=M[2:10,2:10]
M
eigen(t(M))
plot(eigen(t(M))$vectors[,1])
plot(eigen(t(M))$vectors[,2])
plot(eigen(t(M))$vectors[,3])
plot(eigen(t(M))$vectors[,4])
plot(eigen(t(M))$vectors[,5])
test
test=rbind(1:5,1:5,1:5,1:5,1:5)
eigen(test)
eigen(t(test))
eigen(t(test))$vectors[,1]/-.1348400
eigen(M)$vectors[,1]
plot(eigen(M)$vectors[,1]_
plot(eigen(M)$vectors[,1])
M
plot(eigen(t(M))$vectors[,1])
constant=M[9,]
constant[9]=M[8,9]
constant
plot(constant,eigen(t(M))$vectors[,1])
plot(constant,eigen(t(M))$vectors[,2])
plot(constant,eigen(t(M))$vectors[,3])
plot(constant,eigen(t(M))$vectors[,4])
plot(constant,eigen(t(M))$vectors[,5])
plot(constant,eigen(t(M))$vectors[,6])
plot(constant,eigen(t(M))$vectors[,7])
plot(constant,eigen(t(M))$vectors[,8])
plot(constant,eigen(t(M))$vectors[,9])
constant%*%eigen(t(M))$vectors[,1]
constant%*%eigen(t(M))$vectors
b=diag(M)-constant
b
diag(M)
constant
c=matrix(rep(constant,9),nrow=9)
c
c=matrix(rep(constant,9),nrow=9,byrow=TRUE)
c
M
c+diag(b)
c+diag(b)-M
round(c+diag(b)-M,digits=3)
c
eigen(M)$values
b
sort(eigen(M)$values)
sort(b)
eigen(M)$values==b[1]
eigen(M)$values==b[2]
eigen(M)$values==b[3]
eigen(M)$values==b[4]
eigen(M)$values==b[5]
eigen(M)$values==b[6]
eigen(M)$values==b[7]
eigen(M)$values==b[8]
eigen(M)$values==b[9]
lambda=2
1/(2-b)=test
test=1/(2-b)
test
M
v=eigen(t(M))$vectors[,1];l=eigen(t(M))$values[1]
(l-b)*v
v=v/sum(constant*v)
(l-b)*v
sum(constant*v)
t(M)%*%v
l*v
1+b*v
v=eigen(M)$vectors[,1];l=eigen(M)$values[1]
v=v/sum(v)
1+b*v
l*v
sum(constant*v)+b*v
v=v/sum(a*v)
v=v/sum(constant*v)
1+b*v
l*v
(l-b)*v
1/(2-b)
sum(1/(2-b))
prod(l-b)
l-b
M
M=M[1:5,1:5];constant=constant[1:5];b=b[1:5]
l=eigen(M)$values[1];v=eigen(M)$vectors[,1];v=v/sum(constant*v)
1+b*v
l*v
prod(l-b)
a=constant
a[1]*prod((l-b)[-1])
a[1]*prod((l-b)[-1])+a[2]*prod((l-b)[-2])+a[3]*prod((l-b)[-3])+a[4]*prod((l-b)[-4])+a[5]*prod((l-b)[-5])
a[1]*prod((-b)[-1])+a[2]*prod((-b)[-2])+a[3]*prod((-b)[-3])+a[4]*prod((-b)[-4])+a[5]*prod((-b)[-5])
a[1]*prod((-b)[-1])+a[2]*prod((-b)[-2])+a[3]*prod((-b)[-3])+a[4]*prod((-b)[-4])+a[5]*prod((-b)[-5])+prod(-b)
prod(eigen(M)$values)
a[1]*prod((-b)[-1])+a[2]*prod((-b)[-2])+a[3]*prod((-b)[-3])+a[4]*prod((-b)[-4])+a[5]*prod((-b)[-5])-prod(-b)
library(igraph)#
library(R.matlab)#
#
lap<-function(G){#
	n=length(V(G))#
	M=array(0,c(n,n))#
	for(i in 1:n){#
		M[i,neighbors(G,i,mode="in")]=-1/degree(G,i,mode="in")#
	}#
	diag(M)<-1+diag(M)#
	M#
}#
#
id<-function(n){#
	m=array(0,c(n,n))#
	diag(m)=1#
	return(m)#
}
N=50#
#
its=500#
#
vals=array(,its)#
vals2=array(,its)#
sums=array(,its)#
#
j=1#
while(j<=its){#
#
positions<-array(,c(N,2))#
positions[,1]=runif(N,0,1)#
positions[,2]=runif(N,0,1)#
d=as.matrix(dist(positions))#
#
strategy=sample(1:(N-1),N,replace=TRUE)#
#
M<-array(0,c(N,N))#
for(i in 1:N){#
	neighbors=order(d[i,])[2:(strategy[i]+1)]#
	M[i,neighbors]=1/strategy[i]#
}#
L=id(N)-M#
#
# G=erdos.renyi.game(N,p=.4,type="gnp",directed=TRUE)#
# L=lap(G)#
i=which.max(abs(Re(eigen(t(L))$vectors[,N])))#
x=Re(eigen(L)$values)[N-1]#
x=round(x,5)#
y=array(0,N)#
for(k in 1:N){#
y[k]=Re(eigen(L[-k,-k])$values)[N-1]#
}#
sums[j]=sum(y)#
y=round(y,5)#
z=x-y[i]#
vals[j]=x#
vals2[j]=y[i]#
j=j+1#
print(c(x,z))#
if(z<0){#
	print("Negative")#
	j=its+1#
	}#
# if(z==0){#
	# print("interesting")#
	# j=its+1#
# }#
}
